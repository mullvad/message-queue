name: Bookkeeping
on:
  pull_request:
    types: [opened, reopened, ready_for_review]
jobs:
  pr2project:
    runs-on: ubuntu-latest
    steps:
      - name: Assign author
        uses: actions/github-script@v6
        continue-on-error: true
        with:
          script: |
            const { repo, payload: { pull_request: { number, user } } } = context;
            if (user.type === "User") {
              await github.rest.issues.addAssignees({
                ...repo,
                issue_number: number,
                assignees: [user.login],
              })
            }
      - name: Slack Notification
        if: ${{ github.event_name == 'pull_request' && github.event.action == 'opened' }}
        env:
          repo: ${{ github.event.pull_request.base.repo.name }}
          userName: ${{ github.event.pull_request.user.login }}
          pullUrl: ${{ github.event.pull_request.html_url }}
          title: ${{ github.event.pull_request.title }}
        run: |
          curl -s -X POST https://slack.com/api/chat.postMessage \
            -H "Authorization: Bearer ${{ secrets.SLACK_OAUTH_TOKEN }}" \
            -H "Content-Type: application/json; charset=utf-8" \
            -d '{
                  "channel": "C01HSS5S7KL",
                  "username": "Gittan",
                  "icon_url": "https://avatars.githubusercontent.com/u/10848549?v=4",
                  "text": "*${{ env.userName }}* created <${{ env.pullUrl }}|${{ env.title }}> in *${{ env.repo }}*",
                }'
      - name: Add to project board
        if: ${{ github.event.pull_request.user.type == 'User' }}
        env:
          GITHUB_TOKEN: ${{ secrets.PROJECT_TOKEN }}
          PR_ID: ${{ github.event.pull_request.node_id }}
          PROJECT_ID: MDExOlByb2plY3ROZXh0MzM1MQ==
          STATUS_FIELD_ID: MDE2OlByb2plY3ROZXh0RmllbGQyNzYxMA==
          IN_REVIEW_OPTION_ID: 16912349
        run: |
          item_id="$( gh api graphql -f query='
            mutation($project:ID!, $pr:ID!) {
              addProjectNextItem(input: {projectId: $project, contentId: $pr}) {
                projectNextItem {
                  id
                }
              }
            }' -f project=$PROJECT_ID -f pr=$PR_ID --jq '.data.addProjectNextItem.projectNextItem.id')"
          gh api graphql -f query='
            mutation (
              $project: ID!
              $item: ID!
              $status_field: ID!
              $status_value: String!
            ) {
              set_status: updateProjectNextItemField(input: {
                projectId: $project
                itemId: $item
                fieldId: $status_field
                value: $status_value
              }) {
                projectNextItem {
                  id
                  }
              }
            }' -f project=$PROJECT_ID -f item=$item_id -f status_field=$STATUS_FIELD_ID -f status_value=$IN_REVIEW_OPTION_ID

